{"version":3,"file":"handler.js","sources":["webpack:///webpack/bootstrap","webpack:///external \"@elastic/elasticsearch\"","webpack:///./elasticSearch/elasticSearchConnect.ts","webpack:///./elasticSearch/mappings.ts","webpack:///./streams/utils/index.ts","webpack:///./elasticSearch/config.ts","webpack:///./streams/process.ts","webpack:///./handler.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"@elastic/elasticsearch\");","import { Client } from \"@elastic/elasticsearch\";\r\n\r\nexport const esClient = new Client({ node: `https://${process.env.ELASTICSEARCH_URL}` });\r\n","import { RequestParams } from \"@elastic/elasticsearch\";\r\n\r\nexport function getESMappings(index: string): RequestParams.IndicesCreate {\r\n  return {\r\n    index,\r\n    body: {\r\n      properties: {\r\n        id: { type: \"text\" },\r\n        description: { type: \"text\" },\r\n        name: { type: \"text\" },\r\n        addedAt: { type: \"number\" },\r\n      },\r\n    },\r\n  };\r\n}\r\n","\r\nfunction transformData(newImage) {\r\n  const transformedObject = {};\r\n  Object.keys(newImage).forEach((key: string) => {\r\n    const dataType = Object.keys(newImage[key])[0];\r\n    transformedObject[key] = newImage[key][dataType];\r\n  });\r\n  return transformedObject;\r\n}\r\n\r\nexport function extractRecordsFromDynamodbEvent(event) {\r\n  if (!event.Records || !Array.isArray(event.Records) || event.Records.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  return event.Records.reduce((acculator, current) => {\r\n    const ACTION: \"INSERT\" | \"UPDATE\" = current.eventName;\r\n    const existingRecords = acculator[ACTION] || [];\r\n    const existsDynamoDb = current.dynamodb && current.dynamodb.NewImage;\r\n    if (existsDynamoDb) {\r\n      return { ...acculator, [ACTION]: [...existingRecords, transformData(current.dynamodb.NewImage)] };\r\n    }\r\n  }, {});\r\n}\r\n\r\nexport const actions = {\r\n  INSERT: \"INSERT\",\r\n  UPDATE: \"UPDATE\",\r\n};\r\n","export const config = {\r\n  INDEX: \"defaultevents\",\r\n  TYPE: \"bookingevent\",\r\n};\r\n","import { esClient } from \"../elasticSearch/elasticSearchConnect\";\r\nimport { getESMappings } from \"../elasticSearch/mappings\";\r\nimport { extractRecordsFromDynamodbEvent, actions } from \"./utils\";\r\nimport { config } from \"../elasticSearch/config\";\r\n\r\nexport async function indexElasticSearch(event) {\r\n  try {\r\n    // check if indices already exist\r\n    const exists = await esClient.indices.exists({ index: config.INDEX });\r\n    if (!exists) {\r\n      // if not create new index and mappings for it\r\n      await esClient.indices.create(getESMappings(config.INDEX));\r\n    }\r\n    // extract data\r\n\r\n    const dataArray = extractRecordsFromDynamodbEvent(event)[actions.INSERT] || []; // default to empty\r\n\r\n    await Promise.all(\r\n      dataArray.map(async (data) => {\r\n        await esClient.index({\r\n          id: data.id,\r\n          index: config.INDEX,\r\n          body: data,\r\n        });\r\n      }),\r\n    );\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n}\r\n","import { APIGatewayProxyEvent } from \"aws-lambda\";\r\nimport { indexElasticSearch } from \"./streams/process\";\r\n\r\n\r\nexport async function processStreams(event:APIGatewayProxyEvent) {\r\n  await indexElasticSearch(event);\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClFA;;;;;;;;;;;;;ACAA;AAEA;AAAA;AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AADA;AAFA;AAWA;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;;ACzBA;AACA;AACA;AAFA;;ACAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;;AC5BA;AAAA;AAGA;AACA;AACA;;;A","sourceRoot":""}